# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

1.Show all artists with last letter in their name ending with T with 7 characters total.

SELECT DISTINCT artist_name AS Artist
FROM BIT_DB.Spotifydata
WHERE artist_name LIKE '_______T';

2.Show all songs from artists with the frist name starting with O.

SELECT DISTINCT track_name AS Song
FROM BIT_DB.Spotifydata
WHERE artist_name LIKE 'O%';

3.Top 5 instrumentalness songs based on lowest duration.

SELECT DISTINCT track_name AS Song, duration_ms
FROM BIT_DB.Spotifydata
ORDER BY duration_ms ASC
LIMIT 5;

4.Top popular song.

SELECT track_name AS Song
FROM BIT_DB.Spotifydata
WHERE popularity = (SELECT MAX(popularity) FROM BIT_DB.Spotifydata)
LIMIT 1;

5.Top 10 artists with the highest speechiness.

SELECT DISTINCT artist_name AS Top10_Artists, speechiness
FROM BIT_DB.Spotifydata
WHERE speechiness IN (SELECT speechiness FROM BIT_DB.Spotifydata)
ORDER BY speechiness DESC
LIMIT 10;
